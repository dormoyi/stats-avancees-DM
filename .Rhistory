names(df)
head(df)
str(df)
summary(df)
df$pctb
df["pctb"] # différence avec le précédent ?
max(df$pctb)
df[1:4,2]
attach(df) # accès direct aux colonnes, mais attention !! error because pctb exists already
detach(df)
library(MASS)
head(genotype)
summary(genotype)
?tapply
tapply(genotype$Wt,genotype$Mother,mean) ########## permet d'appliquer des fonctions sur un certain type de données
### GRAPHIQUES
print(table(genotype$Litter))
plot(genotype$Litter)
Litter.table=table(genotype$Litter)
print(Litter.table)
sumall=sum(Litter.table[2])
data_frame<-Litter.table/sumall
par(mfrow=c(1,2),oma=c(0,0,3,0)) # mfrow forme du plot, oma marges etc
barplot(data_frame,main="diagramme en barres", col=rainbow(4), horiz = TRUE)
pie(Litter.table,col=rainbow(4),main="camembert")
title(main="Répartition des génotypes des portées", outer=TRUE)
par(mfrow=c(1,1))
#plotyeah = genotype$Wt/sum(genotype$Wt) ######
#hist(plotyeah)
esp = mean(genotype$Wt)
ecart = sd(genotype$Wt)
plot(genotype$Wt)
hist(genotype$Wt, main=paste(ecart,",", esp))
paste("moy=", round(mean(gentoype$Wt),2))
head(genotype)
boxplot(genotype$Wt)
points(esp)
help("mean")    # charge la doc de la commande
?mean           # idem
??mean          # commandes dont le nom ou la vignette contiennent la chaîne
apropos("mean") # commandes dont le nom contient la chaîne
# 1.1 Assigner une valeur -------------------------------
x <- 20
x = 20   # idem
x
print(x) # autre commande
a=((1+sqrt(5))/2)^2 # le nombre d'or au carré
a
objects()
ls()     # autre commande
rm(x)    # suppression de l'objet x
rm(list=objects()) # suppression de tous les objets en mémoire
getwd() # indique le répertoire de travail en cours
# définit le répertoire MonRepertoire à mettre en cours: à mettre en entête de fichier
setwd("MonRepertoire")
c(3,9,5)
c(1,c(2,3,4),5)
2:12
5:-3
x = c(4,5,6); y = c(2,-2,5)
x + y; -x; x > 5
min(x); sin(x); sort(y); length(x)
z = c("I","love","maths")
## ------------------------------------------------------
x = c(5,6,7,2,3,4)
x[2]
x[c(1,3,5)] # Indices positifs
x[c(-3,-4)] # Indice négatif, exclut le 3ème élément de x
x[c(T,T,F,F,T,T)] # Indice valeurs logiques
x[x > 5]
## ------------------------------------------------------
v1=c(-1,3.2,-2,8)
v1  # OK
V1  # erreur, R est sensible à la casse
v2=-2:6
v3=seq(0.05,0.2,0.05)
v4=rep(1,10)
v5=c("OUI","NON")
sort(v1)
# opération composante par composante et recyclage
v6=2*v2-3
v3+v2  # warning, recyclage des coordonnées
log(v3)
v5+1 # erreur puisque v5 est de mode character
v5[2]
length(v6)
v7=v6[length(v6)-(2:0)]
v7=tail(v6,3) #plus simple !
sum(v6)
## -------------------------------------------------------
nbc = c(4138,7077,11176,6474,3735,2365,1573)
pctb= c(1.1,6.6,26.3,64.7,88.7,98,99.9)
sum(nbc*pctb)/sum(nbc) ## 40,62%
weighted.mean(pctb,nbc) # idem
df= data.frame(nbc,pctb,
taille=c("<100","100-199","200-499","500-999",
"1000-1999","2000-4999","plus de 5000"))
print(df)   # comparer avec View(df), clic dans l'onglet environnement
dim(df) #  7 3
head(df)
names(df)
str(df)
summary(df)
df= data.frame(nbc,pctb,
taille=c("<100","100-199","200-499","500-999",
"1000-1999","2000-4999","plus de 5000"),
row.names=3) # la colonne 3 donne le nom des observations
dim(df)          #  7 2
nrow(df)         # nombre de lignes (d'individus)
ncol(df)
names(df)        # les noms des variables
head(df)
str(df)          # head(df) mais sous un autre format
df$nbc
df$pctb
summary(df)      # qqs résumés numériques pour chaque variable
mean(df$pctb)    # moyenne
quantile(df$pctb)# quartile
df$pctb
class(df$pctb)   # vecteur
df["pctb"]
class(df["pctb"])# data.frame à une seule variable
max(df$pctb)     # valeur max de la variable pctb
df[1:4,2]        # valeur de la deuxième variable sur les lignes 1 à 4
#rm(pctb)
#rm(nbc)
attach(df)       # accès direct aux colonnes, mais attention !! certaines variables souvent utilisées
detach(df)       # peuvent être écrasées par les variables de df, par exemple si la variable est x
## -------------------------------------------------------
library(MASS)    # charger le package
?genotype        # documentation du jeu de données
summary(genotype)# le résumé numérique dépend du type de variable
str(genotype)
# quali: table
table(genotype$Mother)
# quanti: mean, median, quantile, min, max
quantile(genotype$Wt,(1:3)/4)
var(genotype$Wt) # variance non biaisée <> variance empirique
sum((genotype$Wt-mean(genotype$Wt))^2)/(length(genotype$Wt)-1)
# observations des portées de génotype I ou dont la mère est de génotype A
genotype[ genotype$Litter=="I" | genotype$Mother=="A" ,]
# génotype de la mère est A ET celui de la portée est B
genotype[ genotype$Litter=="B" & genotype$Mother=="A" ,]
?tapply         # exécute une fonction sur chaque ligne (1) ou colonne(2)
# moyenne de poids en fonction du génotype de la mère
tapply(genotype$Wt,genotype$Mother,mean)
# moyenne de poids en fonction du génotype de la mère et de la portée
tapply(genotype$Wt,                                         # variable
list(mother=genotype$Mother,litter=genotype$Litter), # groupes
mean)                                                # fonction
# moyenne générale
mean(genotype$Wt)
## --- 1
plot(genotype$Litter)               # diagramme en barres des fréquences (nombre d'occurences)
Litter.table=table(genotype$Litter) #  table de comptage
# découper l'écran en deux partie: mfrow=c(nbr de lignes, nbre de colonnes), définir les marges externes (bas, gauche, haut, droite)
par(mfrow=c(1,2),oma=c(0,0,3,0))
barplot(Litter.table,
main="diagramme en barres",
col=rainbow(4))             # choisir des couleurs dans une palette
pie(Litter.table,col=rainbow(4),main="camembert")
title(main="Répartition des génotypes des portées",
outer=TRUE)
## --- 2 et 3
par(mfrow=c(1,1),oma=c(0,0,0,0))    # pour revenir à un seul graphique
barplot(Litter.table/sum(Litter.table),  # en proportion
main="diagramme en barres",col=rainbow(4),
density=10,                 # lignes hachurées
horiz=TRUE)                 # barres horizontales
## --- 4
poids=genotype$Wt
plot(poids) # les valeurs du poids en fonction de l'index de l'observation.
hist(poids) # histogramme en fréquence (nombre d'occurrences)
paste("moy",round(mean(poids),2)) # concatène une chaîne de caractère et un numeric
## --- 5
attach(genotype)
m=mean(Wt) ; s=sd(Wt)
hist(poids,prob=T,  # en proportion
col="grey",    # couleur de remplissage
ylim=c(0,0.05),xlim=c(30,80),  # étendue des axes
main=paste("moy= ",round(m,2),"sd= ",round(s,2) ))  #titre parametre
curve(dnorm(x,m,s),from=30, to=80,add=TRUE,col=2,n=300)
# --- 6 boîte à moustaches
boxplot(poids,horizontal=TRUE)
points(mean(poids),1,pch=8,col="red")
mean(poids)
median(poids)
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
summary(df)
#### DM de DORMOY et NIESSEN
rm(list=objects())
graphics.off()
############################
#### A COMPLETER:
grp_id = 'T' #à remplacer par le nom de votre groupe (voir sur Edunao)
setwd("~/Documents/projets_git/stats-avancees-DM") # pour Ines
############################
#### A NE PAS TOUCHER:
data_poll<-read.table("pollution.txt",sep=" ",header=T,dec=".")
dict = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM' )
set.seed(which(dict==grp_id))
idx = sample(1:length(data_poll$pollution))[1:80]
data_poll = data_poll[idx, ]
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
summary(df)
#
df['pluie'][df['pluie'] == 'Sec'] <- 0
df['pluie'][df['pluie'] == 'Pluie'] <- 1
summary(df)
#
df['pluie'][df['pluie'] == 'Sec'] <- int(0)
#
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
summary(df)
df['pluie']
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
summary(df)
#
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
summary(df)
class(df)
df['pluie'] %<>% mutate_if(is.character,as.numeric)
#
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
df['pluie'] <- lapply(df['pluie'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
# Nord=1, Ouest=2, Sud=3, Est=4 (maybe we could one hot encode that later)
df['vent'][df['vent'] == 'Nord'] <- as.numeric(1)
df['vent'][df['vent'] == 'Ouest'] <- as.numeric(2)
df['vent'][df['vent'] == 'Sud'] <- as.numeric(3)
df['vent'][df['vent'] == 'Est'] <- as.numeric(4)
df['vent'] <- lapply(df['vent'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
pairs(df) #trace tous les graphes à 2 variables possibles
Litter.table=table(df$pluie)
pie(Litter.table,col=rainbow(4),main="camembert")
title(main="Ratio des jours de pluie",
outer=TRUE)
par(mfrow=c(1,2),oma=c(0,0,3,0))
Litter.table=table(df$pluie)
pie(Litter.table,col=rainbow(4),main="camembert")
title(main="Ratio des jours de pluie",
outer=TRUE)
vent.table=table(df$vent)
pie(vent.table,col=rainbow(4),main="Ratio des jours de pluie")
title(main="Plusieurs plots",
outer=TRUE)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
pie(pluie.table,col=rainbow(4),main="Ratio des jours de pluie")
title(main="Plusieurs plots",
outer=TRUE)
vent.table=table(df$vent)
pie(vent.table,col=rainbow(4),main="Ratio des jours de vent")
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
pie(pluie.table,col=rainbow(4),main="Ratio des jours de pluie", legend = rownames(pluie.table))
title(main="Plusieurs plots",
outer=TRUE)
vent.table=table(df$vent)
pie(vent.table,col=rainbow(4),main="Ratio des jours de vent")
pie(vent.table,col=rainbow(4),main="Ratio des jours de vent", legend = rownames(vent.table))
par(mfrow=c(1,2),oma=c(0,0,3,0))
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
pie(pluie.table,col=rainbow(4),main="Ratio des jours de pluie", legend = rownames(pluie.table))
legend = rownames(pluie.table)
legend(rownames(pluie.table))
legend(legend=rownames(pluie.table))
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
pie(pluie.table,col=rainbow(4),main="Ratio des jours de pluie")
legend(legend=rownames(pluie.table))
title(main="Plusieurs plots",
outer=TRUE)
vent.table=table(df$vent)
pie(vent.table,col=rainbow(4),main="Ratio des jours de vent", legend = rownames(vent.table))
summary(df)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
#### DM de DORMOY et NIESSEN
rm(list=objects())
graphics.off()
############################
#### A COMPLETER:
grp_id = 'T' #à remplacer par le nom de votre groupe (voir sur Edunao)
setwd("~/Documents/projets_git/stats-avancees-DM") # pour Ines
############################
#### A NE PAS TOUCHER:
data_poll<-read.table("pollution.txt",sep=" ",header=T,dec=".")
dict = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM' )
set.seed(which(dict==grp_id))
idx = sample(1:length(data_poll$pollution))[1:80]
data_poll = data_poll[idx, ]
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
summary(df)
# we replace the character values by numbers
# pluie = 1, sec  = 0
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
df['pluie'] <- lapply(df['pluie'] , function(x) if(is.character(x)) as.numeric(x) else x)
# Nord=1, Ouest=2, Sud=3, Est=4 (maybe we could one hot encode that later)
df['vent'][df['vent'] == 'Nord'] <- as.numeric(1)
df['vent'][df['vent'] == 'Ouest'] <- as.numeric(2)
df['vent'][df['vent'] == 'Sud'] <- as.numeric(3)
df['vent'][df['vent'] == 'Est'] <- as.numeric(4)
df['vent'] <- lapply(df['vent'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
pie(pluie.table,col=rainbow(4),main="Ratio des jours de pluie")
title(main="Plusieurs plots",
outer=TRUE)
vent.table=table(df$vent)
pie(vent.table,col=rainbow(4),main="Ratio des jours de vent", legend = rownames(vent.table))
summary(df)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
pie(pluie.table,col=rainbow(4),main="Ratio des jours de pluie")
title(main="Plots des jours de vent et de",
outer=TRUE)
vent.table=table(df$vent)
pie(vent.table,col=rainbow(4),main="Ratio des jours de vent", legend = rownames(vent.table))
par(mfrow=c(1,2),oma=c(0,0,3,0))
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
pie(pluie.table,col=rainbow(4),main="Ratio des jours de pluie")
title(main="Plots des jours de vent et de",
outer=TRUE)
vent.table=table(df$vent)
pie(vent.table,col=rainbow(4),main="Ratio des jours de vent")
### IMPORT ET EXPORT DE DONNEES
write.table("ceci est un fichier","boulangeries.txt") #####
x = ((1 + sqrt(5))/2)^2
print(x)
rm(list=objects())
setwd("~/disque_tera/1_cs/2A/sg8 stats")
c(3,9,5)
c(1,c(2,3,4),5)
2:12
5:-3
x = c(4,6,5); y = c(2,-2,5)
x + y; -x; x > 5
min(x); sin(x); sort(x); length(x)
z = c("I","love","maths")
z
x = c(5,6,7,2,3,4)
x
x[c(1,3,7)] # Indices positifs
x[-3] # Indice négatif, exclut le 3ème élément de x
x[c(T,T,F,F,T,T)] # Indice valeurs logiques
x
x[x > 5]
V1 = c(-1, 3.2, -2, 8)
V2 = -2:6
V3 = seq(0.05, 0.2, by=0.05)
V4= rep(1,6)
V5 = c("OUI","NON")
sort(V1)
V1
V6 = 2 * V2 - 3
V6
V3
log(V3)
V3 = seq(0.05, 0.2, by=0.05)
V5
V5[c(2)]
V5[2]
length(V6)
V6
V7 = tail(V6,3)
V7
V6
sum(V6)
nbc = c(4138,7077,11176,6474,3735,2365,1573 )
pctb = c(1.1,6.6,26.3,64.7,88.7,98.0,99.9)
somme = sum(nbc)
pour = sum(nbc*pctb)/somme
pour
df= data.frame(n=nbc,pctb,
taille=c("<100","100 à 199","200 à 499","500 à 999","1000 à 1999","2000 à 4999",
"plus de 5000"))
print(df)
dim(df)
nrow(df)
names(df)
head(df)
str(df)
summary(df)
df$pctb
df["pctb"] # différence avec le précédent ?
max(df$pctb)
df[1:4,2]
attach(df) # accès direct aux colonnes, mais attention !! error because pctb exists already
detach(df)
library(MASS)
head(genotype)
summary(genotype)
?tapply
tapply(genotype$Wt,genotype$Mother,mean) ########## permet d'appliquer des fonctions sur un certain type de données
### GRAPHIQUES
print(table(genotype$Litter))
plot(genotype$Litter)
Litter.table=table(genotype$Litter)
print(Litter.table)
sumall=sum(Litter.table[2])
data_frame<-Litter.table/sumall
par(mfrow=c(1,2),oma=c(0,0,3,0)) # mfrow forme du plot, oma marges etc
barplot(data_frame,main="diagramme en barres", col=rainbow(4), horiz = TRUE)
pie(Litter.table,col=rainbow(4),main="camembert")
title(main="Répartition des génotypes des portées", outer=TRUE)
par(mfrow=c(1,1))
#plotyeah = genotype$Wt/sum(genotype$Wt) ######
#hist(plotyeah)
esp = mean(genotype$Wt)
ecart = sd(genotype$Wt)
plot(genotype$Wt)
hist(genotype$Wt, main=paste(ecart,",", esp))
hist(genotype$Wt, main=paste(ecart,",", esp))
summary(df)
#### DM de DORMOY et NIESSEN
rm(list=objects())
graphics.off()
############################
#### A COMPLETER:
grp_id = 'T' #à remplacer par le nom de votre groupe (voir sur Edunao)
setwd("~/Documents/projets_git/stats-avancees-DM") # pour Ines
############################
#### A NE PAS TOUCHER:
data_poll<-read.table("pollution.txt",sep=" ",header=T,dec=".")
dict = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM' )
set.seed(which(dict==grp_id))
idx = sample(1:length(data_poll$pollution))[1:80]
data_poll = data_poll[idx, ]
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
summary(df)
# we replace the character values by numbers
# pluie = 1, sec  = 0
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
df['pluie'] <- lapply(df['pluie'] , function(x) if(is.character(x)) as.numeric(x) else x)
# Nord=1, Ouest=2, Sud=3, Est=4 (maybe we could one hot encode that later)
df['vent'][df['vent'] == 'Nord'] <- as.numeric(1)
df['vent'][df['vent'] == 'Ouest'] <- as.numeric(2)
df['vent'][df['vent'] == 'Sud'] <- as.numeric(3)
df['vent'][df['vent'] == 'Est'] <- as.numeric(4)
df['vent'] <- lapply(df['vent'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
hist(df$pollution, main=)
plot(df$pollution, main=)
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
############################
#### 2.
pairs(df) #trace tous les graphes à 2 variables possibles
plot(df$T9, main="Pollution en fonction du point dans le dataset")
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
plot(df$T9, main="Pollution en fonction du point dans le dataset")
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
plot(df$T9, main="Pollution en fonction du point dans le dataset")
plot(data$T9, type = "l", col = 1)  # Plot with Base R
plot(df$T9, type = "l", col = 1)  # Plot with Base R
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=TRUE)
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
plot(df$T9, main="Pollution en fonction du point dans le dataset")
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=TRUE)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=FALSE)
plot(df$T9, main="Pollution en fonction du point dans le dataset")
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=FALSE)
