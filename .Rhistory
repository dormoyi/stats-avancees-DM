df2 = melt(df2, id.vars = "pollution", measure.vars = c("T9", "T12", "T15"))
ggplot(df2,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Temp?ratures mesur?es aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Temperature')
df3=df[c("pollution","Ne9","Ne12","Ne15")]
df3=melt(df3, id.vars = "pollution", measure.vars = c("Ne9","Ne12","Ne15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("N?bulosit? mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
#-----------? voir si on garde ce plot------------
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=FALSE)
pairs(df, main = "Nuages de points - corr?lation entre les variables") #trace tous les graphes à 2 variables possibles
library(corrplot)
par(mfrow=c(1,1),oma=c(0,0,1,0))
corrplot(cor(df), main = "Correlation entre les variables", outer = TRUE)
plot(df$vent,df$pollution, main="Pollution en fonction du vent")
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
lm1=lm(pollution~.,data=df)
summary(lm1)
param_estim = lm1$coefficients[9]
param_estim # 1.21385
confint(lm1)
lm1$coefficients
param_estim = lm1$coefficients[10]
param_estim # 0.1501186
confint(lm1)
summary(lm1)
summary(lm1) # Adjusted R-squared:  0.7395
lm2=lm(pollution~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève vent
summary(lm2) # Adjusted R-squared:  0.7433
lm3=lm(pollution~T9+T12+T15+Ne9+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève Ne12
summary(lm3) # Adjusted R-squared:  0.7469
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
lm1=lm(pollution~.,data=df)
summary(lm1)
### GRAPHIQUES
print(table(genotype$Litter))
plot(genotype$Litter)
Litter.table=table(genotype$Litter)
print(Litter.table)
sumall=sum(Litter.table[2])
data_frame<-Litter.table/sumall
x = ((1 + sqrt(5))/2)^2
print(x)
rm(list=objects())
setwd("~/disque_tera/1_cs/2A/sg8 stats")
c(3,9,5)
c(1,c(2,3,4),5)
2:12
5:-3
x = c(4,6,5); y = c(2,-2,5)
x + y; -x; x > 5
min(x); sin(x); sort(x); length(x)
z = c("I","love","maths")
z
x = c(5,6,7,2,3,4)
x
x[c(1,3,7)] # Indices positifs
x[-3] # Indice négatif, exclut le 3ème élément de x
x[c(T,T,F,F,T,T)] # Indice valeurs logiques
x
x[x > 5]
V1 = c(-1, 3.2, -2, 8)
V2 = -2:6
V3 = seq(0.05, 0.2, by=0.05)
V4= rep(1,6)
V5 = c("OUI","NON")
sort(V1)
V1
V6 = 2 * V2 - 3
V6
V3
log(V3)
V3 = seq(0.05, 0.2, by=0.05)
V5
V5[c(2)]
V5[2]
length(V6)
V6
V7 = tail(V6,3)
V7
V6
sum(V6)
nbc = c(4138,7077,11176,6474,3735,2365,1573 )
pctb = c(1.1,6.6,26.3,64.7,88.7,98.0,99.9)
somme = sum(nbc)
pour = sum(nbc*pctb)/somme
pour
df= data.frame(n=nbc,pctb,
taille=c("<100","100 à 199","200 à 499","500 à 999","1000 à 1999","2000 à 4999",
"plus de 5000"))
print(df)
dim(df)
nrow(df)
names(df)
head(df)
str(df)
summary(df)
df$pctb
df["pctb"] # différence avec le précédent ?
max(df$pctb)
df[1:4,2]
attach(df) # accès direct aux colonnes, mais attention !! error because pctb exists already
detach(df)
library(MASS)
head(genotype)
summary(genotype)
?tapply
tapply(genotype$Wt,genotype$Mother,mean) ########## permet d'appliquer des fonctions sur un certain type de données
### GRAPHIQUES
print(table(genotype$Litter))
plot(genotype$Litter)
Litter.table=table(genotype$Litter)
print(Litter.table)
sumall=sum(Litter.table[2])
data_frame<-Litter.table/sumall
par(mfrow=c(1,2),oma=c(0,0,3,0)) # mfrow forme du plot, oma marges etc
barplot(data_frame,main="diagramme en barres", col=rainbow(4), horiz = TRUE)
pie(Litter.table,col=rainbow(4),main="camembert")
title(main="Répartition des génotypes des portées", outer=TRUE)
par(mfrow=c(1,1))
#plotyeah = genotype$Wt/sum(genotype$Wt) ######
#hist(plotyeah)
esp = mean(genotype$Wt)
ecart = sd(genotype$Wt)
plot(genotype$Wt)
hist(genotype$Wt, main=paste(ecart,",", esp))
paste("moy=", round(mean(gentoype$Wt),2))
head(genotype)
boxplot(genotype$Wt)
#### DM de DORMOY et NIESSEN
rm(list=objects())
graphics.off()
############################
#### A COMPLETER:
grp_id = 'T' #à remplacer par le nom de votre groupe (voir sur Edunao)
setwd("~/Documents/projets_git/stats-avancees-DM") # pour Ines
############################
#### A NE PAS TOUCHER:
data_poll<-read.table("pollution.txt",sep=" ",header=T,dec=".")
dict = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM' )
set.seed(which(dict==grp_id))
idx = sample(1:length(data_poll$pollution))[1:80]
data_poll = data_poll[idx, ]
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
# we replace the character values by numbers
# pluie = 1, sec  = 0
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
df['pluie'] <- lapply(df['pluie'] , function(x) if(is.character(x)) as.numeric(x) else x)
# Nord=1, Ouest=2, Sud=3, Est=4 (maybe we could one hot encode that later)
df['vent'][df['vent'] == 'Nord'] <- as.numeric(1)
df['vent'][df['vent'] == 'Ouest'] <- as.numeric(2)
df['vent'][df['vent'] == 'Sud'] <- as.numeric(3)
df['vent'][df['vent'] == 'Est'] <- as.numeric(4)
df['vent'] <- lapply(df['vent'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
labels <- c("Sec", "Pluie")
pie(pluie.table,labels, col=rainbow(4),main="Ratio des jours de pluie", radius = 0.9)
title(main="Plots des jours de vent et de pluie",
outer=TRUE)
vent.table=table(df$vent)
labels2 <- c("Nord", "Ouest", "Sud", "Est")
pie(vent.table, labels2, col=rainbow(4),main="Ratio des jours de vent", radius = 0.9)
par(mfrow=c(1,1),oma=c(0,0,3,0))
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
library(ggplot2)
library(reshape2)
df2=df[c("pollution","T9", "T12", "T15")]
df2 = melt(df2, id.vars = "pollution", measure.vars = c("T9", "T12", "T15"))
ggplot(df2,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Temp?ratures mesur?es aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Temperature')
df3=df[c("pollution","Ne9","Ne12","Ne15")]
df3=melt(df3, id.vars = "pollution", measure.vars = c("Ne9","Ne12","Ne15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("N?bulosit? mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
#-----------? voir si on garde ce plot------------
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=FALSE)
pairs(df, main = "Nuages de points - corr?lation entre les variables") #trace tous les graphes à 2 variables possibles
library(corrplot)
par(mfrow=c(1,1),oma=c(0,0,1,0))
corrplot(cor(df), main = "Correlation entre les variables", outer = TRUE)
plot(df$vent,df$pollution, main="Pollution en fonction du vent")
boxplot(df$vent,df$pollution)
plot(df$vent,df$pollution, main="Pollution en fonction du vent")
param_estim = lm1$coefficients[9]
param_estim # 1.21385
#### DM de DORMOY et NIESSEN
rm(list=objects())
graphics.off()
############################
#### A COMPLETER:
grp_id = 'T' #à remplacer par le nom de votre groupe (voir sur Edunao)
setwd("~/Documents/projets_git/stats-avancees-DM") # pour Ines
############################
#### A NE PAS TOUCHER:
data_poll<-read.table("pollution.txt",sep=" ",header=T,dec=".")
dict = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM' )
set.seed(which(dict==grp_id))
idx = sample(1:length(data_poll$pollution))[1:80]
data_poll = data_poll[idx, ]
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
# we replace the character values by numbers
# pluie = 1, sec  = 0
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
df['pluie'] <- lapply(df['pluie'] , function(x) if(is.character(x)) as.numeric(x) else x)
# Nord=1, Ouest=2, Sud=3, Est=4 (maybe we could one hot encode that later)
df['vent'][df['vent'] == 'Nord'] <- as.numeric(1)
df['vent'][df['vent'] == 'Ouest'] <- as.numeric(2)
df['vent'][df['vent'] == 'Sud'] <- as.numeric(3)
df['vent'][df['vent'] == 'Est'] <- as.numeric(4)
df['vent'] <- lapply(df['vent'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
labels <- c("Sec", "Pluie")
pie(pluie.table,labels, col=rainbow(4),main="Ratio des jours de pluie", radius = 0.9)
title(main="Plots des jours de vent et de pluie",
outer=TRUE)
vent.table=table(df$vent)
labels2 <- c("Nord", "Ouest", "Sud", "Est")
pie(vent.table, labels2, col=rainbow(4),main="Ratio des jours de vent", radius = 0.9)
par(mfrow=c(1,1),oma=c(0,0,3,0))
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
library(ggplot2)
library(reshape2)
df2=df[c("pollution","T9", "T12", "T15")]
df2 = melt(df2, id.vars = "pollution", measure.vars = c("T9", "T12", "T15"))
ggplot(df2,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Temp?ratures mesur?es aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Temperature')
df3=df[c("pollution","Ne9","Ne12","Ne15")]
df3=melt(df3, id.vars = "pollution", measure.vars = c("Ne9","Ne12","Ne15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("N?bulosit? mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
#-----------? voir si on garde ce plot------------
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=FALSE)
pairs(df, main = "Nuages de points - corr?lation entre les variables") #trace tous les graphes à 2 variables possibles
library(corrplot)
par(mfrow=c(1,1),oma=c(0,0,1,0))
corrplot(cor(df), main = "Correlation entre les variables", outer = TRUE)
plot(df$vent,df$pollution, main="Pollution en fonction du vent")
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
lm1=lm(pollution~.,data=df)
summary(lm1)
param_estim = lm1$coefficients[9]
param_estim # 1.21385
confint(lm1)
lm1$coefficients
param_estim = lm1$coefficients[10]
param_estim # 1.21385
summary(lm1)
confint(lm1)
param_estim = lm1$coefficients[9]
param_estim # 0.0781831
param_estim = lm1$coefficients[9]
param_estim # 0.0781831
summary(lm1)
confint(lm1)
param_estim = lm1$coefficients[10]
param_estim # 0.1501186
confint(lm1)
#### DM de DORMOY et NIESSEN
rm(list=objects())
graphics.off()
############################
#### A COMPLETER:
grp_id = 'T' #à remplacer par le nom de votre groupe (voir sur Edunao)
setwd("~/Documents/projets_git/stats-avancees-DM") # pour Ines
############################
#### A NE PAS TOUCHER:
data_poll<-read.table("pollution.txt",sep=" ",header=T,dec=".")
dict = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM' )
set.seed(which(dict==grp_id))
idx = sample(1:length(data_poll$pollution))[1:80]
data_poll = data_poll[idx, ]
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
# we replace the character values by numbers
# pluie = 1, sec  = 0
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
df['pluie'] <- lapply(df['pluie'] , function(x) if(is.character(x)) as.numeric(x) else x)
# Nord=1, Ouest=2, Sud=3, Est=4 (maybe we could one hot encode that later)
df['vent'][df['vent'] == 'Nord'] <- as.numeric(1)
df['vent'][df['vent'] == 'Ouest'] <- as.numeric(2)
df['vent'][df['vent'] == 'Sud'] <- as.numeric(3)
df['vent'][df['vent'] == 'Est'] <- as.numeric(4)
df['vent'] <- lapply(df['vent'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
labels <- c("Sec", "Pluie")
pie(pluie.table,labels, col=rainbow(4),main="Ratio des jours de pluie", radius = 0.9)
title(main="Plots des jours de vent et de pluie",
outer=TRUE)
vent.table=table(df$vent)
labels2 <- c("Nord", "Ouest", "Sud", "Est")
pie(vent.table, labels2, col=rainbow(4),main="Ratio des jours de vent", radius = 0.9)
par(mfrow=c(1,1),oma=c(0,0,3,0))
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
library(ggplot2)
library(reshape2)
df2=df[c("pollution","T9", "T12", "T15")]
df2 = melt(df2, id.vars = "pollution", measure.vars = c("T9", "T12", "T15"))
ggplot(df2,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Temp?ratures mesur?es aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Temperature')
df3=df[c("pollution","Ne9","Ne12","Ne15")]
df3=melt(df3, id.vars = "pollution", measure.vars = c("Ne9","Ne12","Ne15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("N?bulosit? mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
df4=df[c("pollution","Vx9","Vx12","Vx15")]
df4=melt(df4, id.vars = "pollution", measure.vars = c("Vx9","Vx12","VX15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Vx mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
df4=df[c("pollution","Vx9","Vx12","Vx15")]
df4=melt(df4, id.vars = "pollution", measure.vars = c("Vx9","Vx12","Vx15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Vx mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Vx mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Vx'))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Vx mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Vx')
#-----------? voir si on garde ce plot------------
plot(df$T9, type = "l", col = 1)  # Plot with Base R
df3=df[c("pollution","Ne9","Ne12","Ne15")]
df3=melt(df3, id.vars = "pollution", measure.vars = c("Ne9","Ne12","Ne15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("N?bulosit? mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
df4=df[c("pollution","Vx9","Vx12","Vx15")]
df4=melt(df4, id.vars = "pollution", measure.vars = c("Vx9","Vx12","Vx15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Vx mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Vx')
df4=df[c("pollution","Vx9","Vx12","Vx15")]
df4=melt(df4, id.vars = "pollution", measure.vars = c("Vx9","Vx12","Vx15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df4,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Vx mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Vx')
#### DM de DORMOY et NIESSEN
rm(list=objects())
graphics.off()
############################
#### A COMPLETER:
grp_id = 'T' #à remplacer par le nom de votre groupe (voir sur Edunao)
setwd("~/Documents/projets_git/stats-avancees-DM") # pour Ines
############################
#### A NE PAS TOUCHER:
data_poll<-read.table("pollution.txt",sep=" ",header=T,dec=".")
dict = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM' )
set.seed(which(dict==grp_id))
idx = sample(1:length(data_poll$pollution))[1:80]
data_poll = data_poll[idx, ]
############################
#### SUITE DU FICHIER A COMPLETER:
############################
#### 1. Faire une ou des représentation(s) graphique(s) unidimensionnelle(s) des données et commenter
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
# we replace the character values by numbers
# pluie = 1, sec  = 0
df['pluie'][df['pluie'] == 'Sec'] <- as.numeric(0)
df['pluie'][df['pluie'] == 'Pluie'] <- as.numeric(1)
df['pluie'] <- lapply(df['pluie'] , function(x) if(is.character(x)) as.numeric(x) else x)
# Nord=1, Ouest=2, Sud=3, Est=4 (maybe we could one hot encode that later)
df['vent'][df['vent'] == 'Nord'] <- as.numeric(1)
df['vent'][df['vent'] == 'Ouest'] <- as.numeric(2)
df['vent'][df['vent'] == 'Sud'] <- as.numeric(3)
df['vent'][df['vent'] == 'Est'] <- as.numeric(4)
df['vent'] <- lapply(df['vent'] , function(x) if(is.character(x)) as.numeric(x) else x)
summary(df)
par(mfrow=c(1,2),oma=c(0,0,3,0))
pluie.table=table(df$pluie)
labels <- c("Sec", "Pluie")
pie(pluie.table,labels, col=rainbow(4),main="Ratio des jours de pluie", radius = 0.9)
title(main="Plots des jours de vent et de pluie",
outer=TRUE)
vent.table=table(df$vent)
labels2 <- c("Nord", "Ouest", "Sud", "Est")
pie(vent.table, labels2, col=rainbow(4),main="Ratio des jours de vent", radius = 0.9)
par(mfrow=c(1,1),oma=c(0,0,3,0))
plot(df$pollution, main="Pollution en fonction du point dans le dataset")
library(ggplot2)
library(reshape2)
df2=df[c("pollution","T9", "T12", "T15")]
df2 = melt(df2, id.vars = "pollution", measure.vars = c("T9", "T12", "T15"))
ggplot(df2,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Temp?ratures mesur?es aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Temperature')
df3=df[c("pollution","Ne9","Ne12","Ne15")]
df3=melt(df3, id.vars = "pollution", measure.vars = c("Ne9","Ne12","Ne15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df3,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("N?bulosit? mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('N?bulosit?')
df4=df[c("pollution","Vx9","Vx12","Vx15")]
df4=melt(df4, id.vars = "pollution", measure.vars = c("Vx9","Vx12","Vx15"))
par(mfrow=c(1,1),oma=c(0,0,3,0))
ggplot(df4,aes(x=variable,y=value,group=pollution,colour=pollution)) +
geom_line() + ggtitle("Vx mesur?e aux diff?rentes heures de la journ?e pour chaque point") + xlab('Horaire de la mesure') + ylab('Vx')
#-----------? voir si on garde ce plot------------
plot(df$T9, type = "l", col = 1)  # Plot with Base R
lines(df$T12, type = "l", col = 2)
lines(df$T15, type = "l", col = 3)
title(main="Températures aux différentes heures de la jounée pour chaque point",
outer=FALSE)
pairs(df, main = "Nuages de points - corr?lation entre les variables") #trace tous les graphes à 2 variables possibles
library(corrplot)
par(mfrow=c(1,1),oma=c(0,0,1,0))
corrplot(cor(df), main = "Correlation entre les variables", outer = TRUE)
plot(df$vent,df$pollution, main="Pollution en fonction du vent")
df = data_poll
dim(df) # 80 13
head(df)
summary(df)
lm1=lm(pollution~.,data=df)
summary(lm1)
param_estim = lm1$coefficients[9]
param_estim # 0.727194
confint(lm1)
lm1$coefficients
param_estim = lm1$coefficients[10]
param_estim # 0.0781831
confint(lm1)
summary(lm1)
summary(lm1) # Adjusted R-squared:  0.7395
lm2=lm(pollution~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève vent
summary(lm2) # Adjusted R-squared:  0.7433
lm3=lm(pollution~T9+T12+T15+Ne9+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève Ne12
summary(lm3) # Adjusted R-squared:  0.7469
lm4=lm(pollution~T9+T12+T15+Ne9+Ne15+Vx9+Vx12+vpollution+pluie,data=df) # on enlève Vx15
summary(lm4) # Adjusted R-squared:  0.7504
lm5=lm(pollution~T9+T12+T15+Ne9+Ne15+Vx12+vpollution+pluie,data=df) # on enlève Vx9
summary(lm5) # Adjusted R-squared:  0.7537
lm6=lm(pollution~T9+T12+Ne9+Ne15+Vx12+vpollution+pluie,data=df) # on enlève T15
summary(lm6) # Adjusted R-squared:  0.7567
lm7=lm(pollution~T9+T12+Ne9+Vx12+vpollution+pluie,data=df) # on enlève Ne15
summary(lm7) # Adjusted R-squared:  0.7573
lm8=lm(pollution~T9+T12+Ne9+Vx12+vpollution,data=df) # on enlève pluie
summary(lm8) # Adjusted R-squared:  0.7579
lm9=lm(pollution~T12+Ne9+Vx12+vpollution,data=df) # on enlève T9
summary(lm9) # Adjusted R-squared:  0.7541
lmfin = lm8
Y=as.matrix(df$pollution,ncol=1) # vraies observations de lpsa
n=length(Y) # 80
n
library(MASS)
summary(lm1)
summary(lm1) # Adjusted R-squared:  0.7395
lm2=lm(pollution~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève vent
summary(lm1) # Adjusted R-squared:  0.7395
lm2=lm(pollution~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève vent
summary(lm1) # Adjusted R-squared:  0.7395
summary(lm1) # Adjusted R-squared:  0.7373
lm2=lm(pollution~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+vpollution+ventOuest+ventSud+pluieSec,data=df) # on enlève ventNord
summary(lm1) # Adjusted R-squared:  0.7373
lm2=lm(pollution~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève vent
summary(lm1) # Adjusted R-squared:  0.7373
lm2=lm(pollution~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève vent
summary(lm2) # Adjusted R-squared:  0.7433
lm3=lm(pollution~T9+T12+T15+Ne9+Ne15+Vx9+Vx12+Vx15+vpollution+pluie,data=df) # on enlève Ne12
summary(lm3) # Adjusted R-squared:  0.7469
# le vent a une p-value très élevée, alors que selon notre graphique de la question 3, cette variable aurait pu être significative
?stepAIC
